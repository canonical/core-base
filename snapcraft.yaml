name: core22
# version: "22"
adopt-info: bootstrap
summary: Runtime environment based on Ubuntu 22.04
description: |
  The base snap based on the Ubuntu 22.04 release.
confinement: strict
type: base
build-base: core22
grade: stable
assumes: [snapd2.55.5]

parts:
  systemd-deb:
    plugin: nil
    build-packages:
      - devscripts
      - quilt
    source: https://git.launchpad.net/~ubuntu-core-dev/ubuntu/+source/systemd
    source-type: git
    # following branch origin/ubuntu-jammy
    source-commit: d98926d1f60a8f2a478095874357709eb82d6a13
    override-pull: |
      "${CRAFT_PROJECT_DIR}/build-package.sh" pull
      for patch in "${CRAFT_PROJECT_DIR}"/systemd-patches/*.patch; do
        PATCHES=("${patch}" "${PATCHES[@]}")
      done
      for patch in "${PATCHES[@]}"; do
        QUILT_PATCHES=debian/patches quilt import "${patch}"
      done
      QUILT_PATCHES=debian/patches quilt push -a --fuzz=0
      rm -rf .git
      DEBEMAIL="noone@canonical.com" DEBFULLNAME="Ubuntu Core Team" dch -v "249.11-0ubuntu3.3+core0" "Ubuntu Core patches"
    override-build: |
      export DEB_BUILD_OPTIONS=nocheck
      "${CRAFT_PROJECT_DIR}/build-package.sh" build
    override-stage: |
      "${CRAFT_PROJECT_DIR}/build-package.sh" stage
    prime:
      - -local-debs

  probert-deb:
    plugin: nil
    build-packages:
      - devscripts
    source: https://github.com/canonical/probert.git
    source-type: git
    # following branch server/jammy
    source-commit: 253acbe1480fba69d12d6e72f53412da79e27410
    override-pull: |
      "${CRAFT_PROJECT_DIR}/build-package.sh" pull
    override-build: |
      "${CRAFT_PROJECT_DIR}/build-package.sh" build
    override-stage: |
      "${CRAFT_PROJECT_DIR}/build-package.sh" stage
    prime:
      - -local-debs

  consoleconf-deb:
    build-packages:
      - devscripts
    plugin: nil
    source: https://github.com/canonical/subiquity.git
    source-type: git
    # following branch server/jammy
    source-commit: abc053508fa27656f1016e32585077ef567ad591
    override-pull: |
      "${CRAFT_PROJECT_DIR}/build-package.sh" pull
    override-build: |
      "${CRAFT_PROJECT_DIR}/build-package.sh" build
    override-stage: |
      "${CRAFT_PROJECT_DIR}/build-package.sh" stage
    prime:
      - -local-debs

  base:
    plugin: nil
    source: keyrings
    build-packages:
      - wget
    build-environment:
      - LTS: jammy
      - BASE: ${LTS}-base-${CRAFT_TARGET_ARCH}.tar.gz
      - DIR_URL: https://cdimage.ubuntu.com/ubuntu-base/${LTS}/daily/current
      - URL: ${DIR_URL}/${BASE}
      - SHA256: ${DIR_URL}/SHA256SUMS
      - SIG: ${SHA256}.gpg
    override-pull: |
      craftctl default
      wget "${SHA256}" -O sha265sum
      wget "${SIG}" -O sha265sum.gpg
      gpg --no-default-keyring \
          --keyring ./cd-image-keying.gpg \
          --verify sha265sum.gpg sha265sum
      wget "${URL}" -O "${BASE}"
      awk -v "file=${BASE}" '$2=="*"file' sha265sum | sha256sum -c
    override-build: |
      mkdir -p "${CRAFT_PART_INSTALL}/base"
      tar -x --xattrs-include=* -f "${BASE}" -C "${CRAFT_PART_INSTALL}/base"
    override-stage: |
      rm -rf "${CRAFT_STAGE}/base"
      craftctl default
    override-prime: |
      # Do nothing

  bootstrap:
    after:
      - systemd-deb
      - probert-deb
      - consoleconf-deb
      - base
    plugin: make
    source: .
    build-packages:
      - shellcheck
      - distro-info
    override-pull: |
      craftctl set version="$(/bin/date +%Y%m%d)~winitrd"
      craftctl default
    override-build: |
      craftctl default
      rm -f "${CRAFT_PART_INSTALL}"/dev/*
    override-prime: |
      craftctl default
      rm -f bin/busybox
      rm -f usr/lib/snapd/snap-bootstrap
      # ensure build-in tests are run
      cd ${CRAFT_PART_SRC} && make test TESTDIR=${CRAFT_PRIME}

  initrd-rootfs:
    build-packages:
      - dracut-core
      - iucode-tool
      - amd64-microcode
      - intel-microcode
    plugin: nil
    source: ./initrd
    after:
      - bootstrap

    override-build: |
      root="${CRAFT_PART_INSTALL}/usr/lib/ubuntu-core-initramfs"
      main="${root}/main"
      rm -rf "${root}"
      mkdir -p "${main}"
      mkdir -p "${main}/usr/bin"
      mkdir -p "${main}/usr/lib64"
      cp -aT "${CRAFT_PART_SRC}/factory" "${main}"
      cp -aT "${CRAFT_PART_SRC}/features" "${root}"

      install() {
        /usr/lib/dracut/dracut-install -r "${CRAFT_STAGE}" -D "${main}" -a "$@"
      }
      install_bin() {
        /usr/lib/dracut/dracut-install -r "${CRAFT_STAGE}" -D "${main}" --ldd -a "$@"
      }
      for file in $(cat "${CRAFT_PART_SRC}/files.txt" | grep -v "^#"); do
        file=$(bash -c "echo ${CRAFT_STAGE}/${file}")
        if [ -L "${file}" ]; then
           install "${file}"
        elif [ -f "${file}" ]; then
          type="$(file "${file}" --mime-type -b)"
          case "${type}" in
            application/x-pie-executable|application/x-sharedlib)
              install_bin "${file}"
              ;;
            *)
              install "${file}"
              ;;
          esac
        else
          echo "Missing file ${file}" 1>&2
          false
        fi
      done

      for alias in $("${CRAFT_STAGE}/usr/bin/busybox" --list-long); do
        case "${alias}" in
          */busybox|*/mount|*/umount|*/reboot|*/halt|*/init|*/modprobe|*/poweroff)
            ;;
          *)
            dir="$(dirname "${main}/${alias}")"
            if ! [ -d "${dir}" ]; then
              mkdir -p "${dir}"
            fi
            ln -sr "${main}/usr/bin/busybox" "${main}/${alias}"
            ;;
        esac
      done

      mkdir -p "${root}/early"
      "${CRAFT_PART_SRC}/generate-x86-microcode" "${root}/early/microcode.cpio"

      mkdir -p "${root}/efi"
      cp -a "${CRAFT_STAGE}"/usr/lib/systemd/boot/efi/linux*.efi.stub "${root}/efi"
      # TODO generate properly
      cp -a "${CRAFT_PART_SRC}/sbat.txt" "${root}/efi"

      cp -aT "${CRAFT_PART_SRC}/snakeoil" "${root}/snakeoil"
      cp -aT "${CRAFT_PART_SRC}/modules" "${root}/modules"
