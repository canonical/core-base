name: core22
# version: "22"
adopt-info: bootstrap
summary: Runtime environment based on Ubuntu 22.04
description: |
  The base snap based on the Ubuntu 22.04 release.
confinement: strict
type: base
build-base: core22
grade: stable
assumes: [snapd2.55.5]
compression: lzo

parts:
  probert-deb:
    plugin: nil
    source: https://github.com/canonical/probert.git
    source-type: git
    # following branch server/jammy
    source-commit: 639255e5ddceb00cb21c2436e7ce1f7430aa710f
    override-pull: |
      snapcraftctl pull
      # install build dependencies
      export DEBIAN_FRONTEND=noninteractive
      export DEBCONF_NONINTERACTIVE_SEEN=true
      sudo -E apt-get build-dep -y ./
    override-build: |
      # unset the LD_FLAGS and LD_LIBRARY_PATH vars that snapcraft sets for us
      # as those will point to the $SNAPCRAFT_STAGE which on re-builds will
      # contain things like libc and friends that confuse the debian package
      # build system
      # TODO: should we unset $PATH to not include $SNAPCRAFT_STAGE too?
      unset LD_FLAGS
      unset LD_LIBRARY_PATH
      # run the real build (but just build the binary package, and don't
      # bother compressing it too much)
      dpkg-buildpackage -b -uc -us -Zgzip -zfast
      cp ../probert-{network,common}*.deb $SNAPCRAFT_PART_INSTALL
    stage:
      - -probert*.deb
    # XXX: Dirty hacks to enable building core22 on non-focal systems.
    # See below for details.
    override-prime: |
      unset LD_LIBRARY_PATH;
      export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
      # ensure snapcraftctl is found, see
      # https://github.com/snapcore/snapcraft/pull/2251
      export PATH="$PATH:/snap/snapcraft/current/bin/scriptlet-bin"
      snapcraftctl prime
  consoleconf-deb:
    after:
      - probert-deb
    plugin: nil
    source: https://github.com/canonical/subiquity.git
    source-type: git
    # following branch server/jammy
    source-commit: 8f9f97c69bb36048ea4c9e16be34bca3ac141771
    override-pull: |
      snapcraftctl pull
      # install build dependencies
      export DEBIAN_FRONTEND=noninteractive
      export DEBCONF_NONINTERACTIVE_SEEN=true
      sudo -E apt-get build-dep -y ./
    override-build: |
      # unset the LD_FLAGS and LD_LIBRARY_PATH vars that snapcraft sets for us
      # as those will point to the $SNAPCRAFT_STAGE which on re-builds will
      # contain things like libc and friends that confuse the debian package
      # build system
      # TODO: should we unset $PATH to not include $SNAPCRAFT_STAGE too?
      unset LD_FLAGS
      unset LD_LIBRARY_PATH
      # run the real build (but just build the binary package, and don't
      # bother compressing it too much)
      dpkg-buildpackage -b -uc -us -Zgzip -zfast
      cp ../console-conf_*.deb ../subiquitycore_*.deb $SNAPCRAFT_PART_INSTALL
    stage:
      - -console-conf_*.deb
      - -subiquitycore_*.deb
    # XXX: Dirty hacks to enable building core22 on non-focal systems.
    # See below for details.
    override-prime: |
      unset LD_LIBRARY_PATH;
      export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
      # ensure snapcraftctl is found, see
      # https://github.com/snapcore/snapcraft/pull/2251
      export PATH="$PATH:/snap/snapcraft/current/bin/scriptlet-bin"
      snapcraftctl prime
  bootstrap:
    after:
      - consoleconf-deb
    plugin: make
    source: .
    build-packages:
      - shellcheck
      - wget
      - distro-info
    build-snaps:
      # XXX: Temporarily force using snapd from edge for building the snap,
      # as there seems to be an issue with the current snapd on impish, causing
      # core-dumps of the mksquashfs call (via `snap pack`).
      - snapd/latest/edge
    # XXX: Dirty hacks to enable building core22 on non-jammy systems.
    # Without these overrides both the PATH and LD_LIBRARY_PATH contain paths
    # in the part's install directory which binaries can be incompatible with
    # the ones running on our system.  We don't need those while running stage
    # and prime anyway.
    override-pull: |
      unset LD_LIBRARY_PATH;
      snapcraftctl set-version "$(/bin/date +%Y%m%d)"
      snapcraftctl pull
    override-stage: |
      unset LD_LIBRARY_PATH;
      export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
      # ensure snapcraftctl is found, see
      # https://github.com/snapcore/snapcraft/pull/2251
      export PATH="$PATH:/snap/snapcraft/current/bin/scriptlet-bin"
      snapcraftctl stage
    override-prime: |
      unset LD_LIBRARY_PATH;
      export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
      # ensure snapcraftctl is found, see
      # https://github.com/snapcore/snapcraft/pull/2251
      export PATH="$PATH:/snap/snapcraft/current/bin/scriptlet-bin"
      snapcraftctl prime
      # ensure build-in tests are run
      cd ${SNAPCRAFT_PART_SRC} && make test TESTDIR=${SNAPCRAFT_PRIME}
