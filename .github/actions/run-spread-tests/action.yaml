name: 'Run spread command with Grafana logging'
inputs:
  working-directory:
    required: false
    default: ./
    type: string
  spread-command:
    description: Complete spread command to run i.e. spread google-nested:tests/spread/main/
    required: true
    type: string
    
runs:
  using: "composite"
  steps:
  - name: Setup grafana parameters
    shell: bash
    run: |
        # Configure parameters to filter logs (these logs are sent read by grafana agent)
        CHANGE_ID="${{ github.event.number }}"
        if [ -z "$CHANGE_ID" ]; then
          CHANGE_ID="main"
        fi
        FILTERED_LOG_FILE="${{ github.workspace }}/spread_${CHANGE_ID}_n${{ github.run_attempt }}.filtered.log"
        echo FILTERED_LOG_FILE="$FILTERED_LOG_FILE"  >> $GITHUB_ENV

        # Add start line to filtered log
        echo "GRAFANA START: pr ${CHANGE_ID} attempt ${{ github.run_attempt }} run ${{ github.run_id }}" > "$FILTERED_LOG_FILE"

  - name: Run spread
    shell: bash
    run: |
      cd "${{ inputs.working-directory }}"
      (
        set -o pipefail
        ${{ inputs.spread-command }} | \
          ./tests/lib/external/snapd-testing-tools/utils/log-filter -o $FILTERED_LOG_FILE -e Debug -e WARNING: -f Failed=NO_LINES -f Error=NO_LINES | \
          tee spread.log
      )

  - name: Write log for Grafana
    if: always()
    shell: bash
    run: |
      cd "${{ inputs.working-directory }}"
      if [ -e spread.log ]; then
        echo "Running spread log analyzer"
        ACTIONS_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}"
        ./tests/lib/external/snapd-testing-tools/utils/log-parser spread.log --output spread-results.json --cut 1 >/dev/null
        while IFS= read -r line; do
            if [ ! -z "$line" ]; then
                echo "Adding failed test line to filtered log"
                echo "GRAFANA FAILED: $line $ACTIONS_URL" | tee -a "$FILTERED_LOG_FILE"
            fi
        done <<< $(jq -r '.[] | select( .type == "info" ) | select( .info_type == "Error" ) | "\(.verb) \(.task)"' spread-results.json)
      else
        echo "No spread log found, skipping errors reporting"
      fi

      